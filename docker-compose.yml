services:
  db:
    image: postgres:16
    restart: unless-stopped
    hostname: postgres
    environment:
      POSTGRES_PASSWORD: ${DOCKER_DB_PASSWORD}
      POSTGRES_USER: ${DOCKER_DB_USER}
      POSTGRES_DB: ${DOCKER_DB_NAME}
    ports:
      - ${DB_PORT}:${DOCKER_DB_PORT}
    # Tell docker to store pg's data in a docker volume that'll persist
    # Do not change that to postgresql/data since it will have conflicts with the postgres initialization.
    volumes:
      - pgdata:/var/lib/postgresql/pgdata
    # Prevent log files from becoming too large
    logging:
      options:
        max-size: "30m"
        max-file: "10"

  pgadmin:
  # Probably would be nice to mute the stdout since it's spamming like hell.
    image: dpage/pgadmin4
    env_file:
      - .env
    depends_on:
      - db
    ports:
      - 5555:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    restart: unless-stopped

  web:
    tty: true
    restart: always
    build:
      context: .
      # Target the correct stage from the Dockerfile(e.g as development)
      target: ${NODE_ENV}
      dockerfile: Dockerfile
    stdin_open: true
    depends_on:
      - db
      # Potentially redis also if needed
    command: sh bin/startup.sh
    ports:
      - ${SERVER_PORT}:5050
    environment:
      # We need this for the building proccess.
      NODE_ENV: development
      DEBUG: nodejs-docker-express:*
    # Specify environment variable file. This is needed at least for the prisma configuration to be able to resolve the DOCKER_DATABASE_URL
    env_file:
      - .env
    logging:
      options:
        max-size: "30m"
        max-file: "10"
    volumes:
      - .:/app
      - node_modules:/app/node_modules

volumes:
  pgdata:
  pgadmin-data:
  node_modules: